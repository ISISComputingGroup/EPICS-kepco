InTerminator = '\r\n';
OutTerminator = '\n';
ReplyTimeout = 2000;

getIDN {
    out "*IDN?";
    #Read no more that 39 chars (EPICS limit)
    in "%/(.{0,39})/";
    ExtraInput = Ignore;
}

getFirmware {
    out "*IDN?";
    # Format: Manufacturer, Model, Serial Number, Main revision-Flash revision
    # For example: KEPCO, BIT4886-6 200-20, A38621 11/10/98, 1.81-1.81.
    # Regex gets everything after the last space, comma or dash
    in "%*/(.*[, -])+/%f";
    ExtraInput = Ignore;
}

setRemote
{
    #Needs to be done first
    out "SYST:REM %{0|1}";
}

readActualCurrent {
    out "MEAS:CURR?";
    in "%f";
}

readSetpointCurrent {
    out "CURR?";
    in "%f";
}

writeCurrent {
    # Set into remote mode and communicate current
    out "SYST:REM 1";
    wait 10;
    out "CURR %f";
	wait 10;
}

# special for muon zerofield
writeCurrentNoRemote {
    # communicate current
    out "CURR %f";
	wait 20;
	# need to wait briefly otherwise seem to get an inaccurate setpoint reading 
	out "CURR?";
	in "%(\$1)f";
}

readActualVoltage {
    out "MEAS:VOLT?";
    in "%f";
}

readSetpointVoltage {
    out "VOLT?";
    in "%f";
}

writeVoltage {
    # Set into remote mode and communicate voltage
    out "SYST:REM 1";
    wait 10;
    out "VOLT %f";
	wait 10;
}

writeVoltageNoRemote {
    # communicate voltage
    out "VOLT %f";
	wait 20;
}

readOutputMode
{
    out "FUNC:MODE?";
    in "%d";
}

sendCommand
{
    out "%s";
    wait 10;
}

sendCommandAndRead
{
    out "%s";
    in "%39c";
    ExtraInput = Ignore;    
}

setOutputMode
{
    # Set into remote mode and Communicate output mode
    out "SYST:REM 1";
    wait 10;
    out "FUNC:MODE %{VOLT|CURR}";
}

readOutputStatus
{
    out "OUTP?";
    in "%d";
}

setOutputStatus
{
    # Set into remote mode and communicate output status
    out "SYST:REM 1";
    wait 10;
    out "OUTP %{0|1}";
}

RST
{
    out "*RST";
}

getCurrentRange
{
    out "CURR:RANG?";
    in "%d";
}

getVoltageRange
{
    out "VOLT:RANG?";
    in "%d";
}

setCurrentRange
{
    out "SYST:REM 1";
    wait 10;
    out "CURR:RANG %d";
}

setVoltageRange
{
    out "SYST:REM 1";
    wait 10;
    out "VOLT:RANG %d";
}

setAutoCurrentRange
{
    out "SYST:REM 1";
    wait 10;
    out "CURR:RANG:AUTO %d";
}

setAutoVoltageRange
{
    out "SYST:REM 1";
    wait 10;
    out "VOLT:RANG:AUTO %d";
}

resetWaitResendSPs {
    # Reset 
    RST;

    # Wait for reset to complete
    wait 100;

    # Communicate output mode
    out "FUNC:MODE %(\$1OUTPUTMODE:SP.VAL){VOLT|CURR}";
    # Immediately update readback
    out "FUNC:MODE?";
    in "%(\$1OUTPUTMODE)d";

    # Communicate voltage
    out "VOLT %(\$1VOLTAGE:SP.VAL)f";
    # immediately update SP:RBV
    out "VOLT?";
    in "%(\$1VOLTAGE:SP:RBV)f";

    # Communicate current
    out "CURR %(\$1CURRENT:SP.VAL)f";
    # immediately update SP:RBV
    out "CURR?";
    in "%(\$1CURRENT:SP:RBV)f";

    # Communicate output status
    out "OUTP %(\$1OUTPUTSTATUS:SP.VAL){0|1}";
    # Immediately update readback
    out "OUTP?";
    in "%(\$1OUTPUTSTATUS){0|1}";
}
