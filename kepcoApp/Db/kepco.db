record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
	field(VAL, "$(RECSIM=0)")
}

record(bo, "$(P)DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(stringin, "$(P)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@kepco.proto getIDN $(PORT)")
    field(PINI, "YES")
    field(FLNK, "$(P)REMOTE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:IDN")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)FIRMWARE") {
    field(DESC, "The firmware version of the KEPCO")
    field(DTYP, "stream")
    field(INP,  "@kepco.proto getFirmware $(PORT)")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FIRMWARE")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)RSTRSND:ON_START.PROC")
}

record(stringin, "$(P)RST")
{
    field(DESC, "Reset the power supply")
    field(DTYP, "stream")
    field(INP,  "@kepco.proto RST $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RST")
    field(SDIS, "$(P)DISABLE")
}

record(stringout, "$(P)SENDCMD")
{
    field(DESC, "Send command")
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto sendCommand $(PORT)")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SENDCMD")
}

record(stringout, "$(P)SENDRECV")
{
    field(DESC, "Send and read")
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto sendCommandAndRead $(PORT)")
    field(SDIS, "$(P)DISABLE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SENDRECV")
}

## if we wished to do some initialisation this is an example
## currently ECHO and PROM seem to be off anyway as well as LF0
## though we set xon/xoff in IOC we don't currently enabel it on
## kepco
#record(sseq, "$(P)MAIN:INIT")
#{
#    field(STR1, "SYST:SET LF0")
#    field(STR2, "SYST:COMM:SER:ECHO OFF")
#    field(STR3, "SYST:COMM:SER:PROM OFF")
#    field(STR4, "SYST:COMM:SER:PACE XON")
#    field(LNK1, "$(P)SENDCMD PP")
#    field(LNK2, "$(P)SENDCMD PP")
#    field(LNK3, "$(P)SENDCMD PP")
#    field(LNK4, "$(P)SENDCMD PP")
#    field(DLY2, "0.05")
#    field(DLY3, "0.05")
#    field(DLY4, "0.05")
#    field(PINI, "YES")
#}

record(stringin, "$(P)RSTRSND") {
    field(DESC, "Reset and resend setpoints to kepco")
    field(DTYP, "stream")
    field(INP, "@kepco.proto resetWaitResendSPs($(P)) $(PORT) ") # Reset and resend commands via proto so we can wait for reset to complete
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:RSTRSND")
    field(SDIS, "$(P)DISABLE")
}

record(calcout, "$(P)RSTRSND:ON_START") {
    field(DESC, "Trigger RSTRSND on start")
    field(INPA, "$(RESET_ON_START)")
    field(INPB, "$(P)FIRMWARE")
    field(CALC, "(A == 1 && B <= 2.0) || A == 2")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)RSTRSND.PROC")
}

record(bo, "$(P)REMOTE") 
{
    #Must be put into remote or reset before PSU related commands sent
    field(DESC, "Put the unit into remote mode")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setRemote $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(VAL, "1")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:REMOTE")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)CURRENT") 
{
    field(DESC, "Current")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readActualCurrent $(PORT)")
    field(PREC, "3")
    field(EGU,  "A")
    field(HOPR, $(CURRENT_MAX=0))
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
}

record(mbbi, "$(P)CURRENT:RANGE")
{
    field(DESC, "Current Range")
    field(ZRST, "Full")
    field(ONST, "Quarter")
	field(ZRVL, "1")
	field(ONVL, "4")
    field(DTYP, "stream")
    field(INP,  "@kepco.proto getCurrentRange $(PORT)")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT:RANGE")
    field(SDIS, "$(P)DISABLE")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
}

# not autosaved as set by macro from RANGE:INIT 
record(mbbo, "$(P)CURRENT:RANGE:SP")
{
    field(ZRST, "Full")
    field(ONST, "Quarter")
    field(TWST, "Auto")
	field(FLNK, "$(P)CURRENT:RANGE:SP:SEQ.PROC")
    info(archive, "VAL")
}

record(seq, "$(P)CURRENT:RANGE:SP:SEQ")
{
    field(SELM, "Specified")
	field(SELL, "$(P)CURRENT:RANGE:SP")
	field(DOL1, "1")
	field(DOL2, "4")
	field(DOL3, "1")
	field(SHFT, "0")
	field(OFFS, "1")
    field(LNK1, "$(P)CURRENT:RANGE:SP_ PP")
    field(LNK2, "$(P)CURRENT:RANGE:SP_ PP")
    field(LNK3, "$(P)CURRENT:RANGE:AUTO:SP_ PP")
}

record(longout, "$(P)CURRENT:RANGE:SP_")
{
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setCurrentRange $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT:RANGE.RVAL PP")
    field(SDIS, "$(P)DISABLE")
}

record(longout, "$(P)CURRENT:RANGE:AUTO:SP_")
{
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setAutoCurrentRange $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT:RANGE:AUTO PP")
    field(SDIS, "$(P)DISABLE")
}

record(stringout, "$(P)CURRENT:RANGE:INIT")
{
    field(VAL, "$(CURRENT_RANGE=Auto)")
	field(OUT, "$(P)CURRENT:RANGE:SP PP")
	field(PINI, "YES")
}

# These current PVs communicate with the device but are not read/set by the user directly, instead control is done 
# through the ramping PVs, which decide what to forward to the hardware
# note that the muon zerofield controler reads directly from _CURRENT:SP:RBV rather than
# from CURRENT:SP:RBV for performance reasons as it does fast updates
# this PV is also updated via stream device record redirection when a new SP is set,
# again for muon zerofield performance reasons
record(ai, "$(P)_CURRENT:SP:RBV") 
{
    field(DESC, "Current Setpoint Readback")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readSetpointCurrent $(PORT)")
    field(PREC, "3")
    field(EGU,  "A")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT:SP:RBV")
    field(SDIS, "$(P)DISABLE")
    field(FLNK, "$(P)FIELD:SP:RBV:CONV.PROC PP")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
}

## if we needed a faster update of SP:RBV in standard mode we could try adding
##     $(IFREMOTE_ON_SET=)    field(FLNK, "$(P)_CURRENT:SP:RBV.PROC CA")
## in IFNOTREMOTE_ON_SET mode we read and update SP:RBV directly from protocol file 
record(ao, "$(P)_CURRENT:SP") 
{
    field(DESC, "Current Setpoint")
    field(SCAN, "Passive")
    field(DTYP, "stream")
$(IFREMOTE_ON_SET=)     field(OUT,  "@kepco.proto writeCurrent $(PORT)")
$(IFNOTREMOTE_ON_SET=#) field(OUT,  "@kepco.proto writeCurrentNoRemote($(P)) $(PORT)")
    field(EGU, "A")
    #field(HOPR, "5.0")
    #field(LOPR, "0.01")    
    field(PREC, "3")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT:SP PP")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
}

record(ai, "$(P)VOLTAGE") 
{
    field(DESC, "Voltage")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readActualVoltage $(PORT)")
    field(PREC, "3")
    field(EGU,  "V")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
}

record(ai, "$(P)VOLTAGE:SP:RBV") 
{
    field(DESC, "Voltage setpoint readback")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readSetpointVoltage $(PORT)")
    field(PREC, "3")
    field(EGU,  "V")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE:SP:RBV")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
}

## if we needed a faster update of SP:RBV in standard mode we could try adding
##    $(IFREMOTE_ON_SET=) field(FLNK, "$(P)VOLTAGE:SP:RBV.PROC CA")
## currently writeVoltageNoRemote does not update SP:RBV unlike writeCurrentNoRemote
record(ao, "$(P)VOLTAGE:SP") 
{
    field(DESC, "Voltage setpoint")
    field(SCAN, "Passive")
    field(DTYP, "stream")
$(IFREMOTE_ON_SET=)    field(OUT,  "@kepco.proto writeVoltage $(PORT)")
$(IFNOTREMOTE_ON_SET=) field(OUT,  "@kepco.proto writeVoltageNoRemote $(PORT)")
    field(EGU, "V")
    #field(HOPR, "5.0")
    #field(LOPR, "0.01")    
    field(PREC, "3")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE:SP PP")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
    info(archive, "5.0 VAL")
    info(autosaveFields, "VAL")
}

record(mbbi, "$(P)VOLTAGE:RANGE")
{
    field(DESC, "Voltage Range")
    field(ZRST, "Full")
    field(ONST, "Quarter")
	field(ZRVL, "1")
	field(ONVL, "4")
    field(DTYP, "stream")
    field(INP,  "@kepco.proto getVoltageRange $(PORT)")
    info(archive, "VAL")
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE:RANGE")
    field(SDIS, "$(P)DISABLE")
}

# not autosaved as set by macro from RANGE:INIT 
record(mbbo, "$(P)VOLTAGE:RANGE:SP")
{
    field(ZRST, "Full")
    field(ONST, "Quarter")
    field(TWST, "Auto")
	field(FLNK, "$(P)VOLTAGE:RANGE:SP:SEQ.PROC")
    info(archive, "VAL")
}

record(seq, "$(P)VOLTAGE:RANGE:SP:SEQ")
{
    field(SELM, "Specified")
	field(SELL, "$(P)VOLTAGE:RANGE:SP")
	field(DOL1, "1")
	field(DOL2, "4")
	field(DOL3, "1")
	field(SHFT, "0")
	field(OFFS, "1")
    field(LNK1, "$(P)VOLTAGE:RANGE:SP_ PP")
    field(LNK2, "$(P)VOLTAGE:RANGE:SP_ PP")
    field(LNK3, "$(P)VOLTAGE:RANGE:AUTO:SP_ PP")
}

record(longout, "$(P)VOLTAGE:RANGE:SP_")
{
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setVoltageRange $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE:RANGE.RVAL PP")
    field(SDIS, "$(P)DISABLE")
}

record(longout, "$(P)VOLTAGE:RANGE:AUTO:SP_")
{
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setAutoVoltageRange $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE:RANGE:AUTO PP")
    field(SDIS, "$(P)DISABLE")
}

record(stringout, "$(P)VOLTAGE:RANGE:INIT")
{
    field(VAL, "$(VOLTAGE_RANGE=Auto)")
	field(OUT, "$(P)VOLTAGE:RANGE:SP PP")
	field(PINI, "YES")
}

record(bi, "$(P)OUTPUTMODE") 
{
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readOutputMode $(PORT)")
    field(ZNAM, "VOLTAGE")
    field(ONAM, "CURRENT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUTMODE")
    field(SDIS, "$(P)DISABLE")
    info(archive, "5.0 VAL")
}

record(bo, "$(P)OUTPUTMODE:SP") 
{
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setOutputMode($(P)) $(PORT)")
    field(ZNAM, "VOLTAGE")
    field(ONAM, "CURRENT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUTMODE:SP PP")
    field(SDIS, "$(P)DISABLE")
    info(autosaveFields, "VAL")
}

alias("$(P)OUTPUTMODE", "$(P)OUTPUTMODE:SP:RBV")

record(bi, "$(P)OUTPUTSTATUS") 
{
    field(SCAN, "Passive") # Scanned by _SCAN_LOOP
    field(DTYP, "stream")
    field(INP,  "@kepco.proto readOutputStatus $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUTSTATUS")
    field(SDIS, "$(P)DISABLE")
    info(alarm, "KEPCO")
    info(archive, "5.0 VAL")
}

record(bo, "$(P)OUTPUTSTATUS:SP") 
{
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@kepco.proto setOutputStatus($(P)) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUTSTATUS:SP PP")
    field(SDIS, "$(P)DISABLE")
    info(autosaveFields, "VAL")
}

alias("$(P)OUTPUTSTATUS", "$(P)OUTPUTSTATUS:SP:RBV")

record(ao, "$(P)FIELD:SP")
{
    field(DESC, "Field setpoint")
    field(FLNK, "$(P)FIELD:SP:CONV.PROC PP")
    field(EGU, "G")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(ao, "$(P)FIELD:SP:RBV")
{
    field(DESC, "Field setpoint readback")
    field(EGU, "G")
    info(INTEREST, "MEDIUM")
}

### SIMULATION RECORDS ###

record(stringout, "$(P)SIM:SENDCMD")
{
}
alias("$(P)SIM:SENDCMD","$(P)SIM:SENDRECV")

record(ai, "$(P)SIM:CURRENT")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    
    # On real device, we update SP:RBV from the protocol whenever a new SP is sent.
    # This FLNK approximates this behaviour in recsim mode.
    # The muon ZF system requires fairly quick updates of setpoint readbacks after setting
    # setpoints, hence this extra complexity.
    field(FLNK, "$(P)_CURRENT:SP:RBV")
}

alias("$(P)SIM:CURRENT","$(P)SIM:CURRENT:SP")

alias("$(P)SIM:CURRENT","$(P)SIM:CURRENT:SP:RBV")

record(bo, "$(P)SIM:REMOTE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:IDN")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:FIRMWARE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:RST")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(stringin, "$(P)SIM:RSTRSND")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:VOLTAGE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    
    # On real device, we update SP:RBV from the protocol whenever a new SP is sent.
    # This FLNK approximates this behaviour in recsim mode.
    # The muon ZF system requires fairly quick updates of setpoint readbacks after setting
    # setpoints, hence this extra complexity.
    field(FLNK, "$(P)VOLTAGE:SP:RBV")
}

alias("$(P)SIM:VOLTAGE","$(P)SIM:VOLTAGE:SP")

alias("$(P)SIM:VOLTAGE","$(P)SIM:VOLTAGE:SP:RBV")

record(bi, "$(P)SIM:OUTPUTMODE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:OUTPUTMODE","$(P)SIM:OUTPUTMODE:SP")

alias("$(P)SIM:OUTPUTMODE","$(P)SIM:OUTPUTMODE:SP:RBV")

record(bi, "$(P)SIM:OUTPUTSTATUS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:OUTPUTSTATUS","$(P)SIM:OUTPUTSTATUS:SP")

alias("$(P)SIM:OUTPUTSTATUS","$(P)SIM:OUTPUTSTATUS:SP:RBV")

record(seq, "$(P)_SCAN_LOOP") {
    field(DESC, "Control scans")
    field(SELM, "All")
    field(SELN, "1")
    field(SCAN, ".5 second")

    field(DOL0, "1")
    field(DLY0, "0")
    field(LNK0, "$(P)_CURRENT:SP:RBV.PROC")

    field(DOL1, "1")
    field(DLY1, "0.05")
    field(LNK1, "$(P)CURRENT.PROC")

    field(DOL2, "1")
    field(DLY2, "0.05")
    field(LNK2, "$(P)VOLTAGE.PROC")

    field(DOL3, "1")
    field(DLY3, "0.05")
    field(LNK3, "$(P)VOLTAGE:SP:RBV.PROC")
}

record(seq, "$(P)_SCAN_LOOP2") {
    field(DESC, "Control scans")
    field(SELM, "All")
    field(SELN, "1")
    field(SCAN, "2 second")
    field(DOL1, "1")
    field(DLY1, "0.05")
    field(LNK1, "$(P)OUTPUTMODE.PROC")

    field(DOL2, "1")
    field(DLY2, "0.05")
    field(LNK2, "$(P)OUTPUTSTATUS.PROC")

    field(DOL3, "1")
    field(DLY3, "0.05")
    field(LNK3, "$(P)VOLTAGE:RANGE.PROC")

    field(DOL4, "1")
    field(DLY4, "0.05")
    field(LNK4, "$(P)CURRENT:RANGE.PROC")	
}

record(mbbi, "$(P)SIM:CURRENT:RANGE")
{
    field(DTYP, "Raw Soft Channel")
    field(ZRST, "Full")
    field(ONST, "Quarter")
	field(ZRVL, "1")
	field(ONVL, "4")
}

record(longout, "$(P)SIM:CURRENT:RANGE:AUTO")
{
}

record(mbbi, "$(P)SIM:VOLTAGE:RANGE")
{
    field(DTYP, "Raw Soft Channel")
    field(ZRST, "Full")
    field(ONST, "Quarter")
	field(ZRVL, "1")
	field(ONVL, "4")
}

record(longout, "$(P)SIM:VOLTAGE:RANGE:AUTO")
{
}
